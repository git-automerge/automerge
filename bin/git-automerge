#!/usr/bin/env bash

set -eo pipefail

if [[ "$1" == "init" ]]; then
  CONFIG_FILE="automerge-config.yaml"

  if [[ -f "$CONFIG_FILE" ]]; then
    echo "‚ö†Ô∏è $CONFIG_FILE already exists. Aborting."
    exit 1
  fi

  cat > "$CONFIG_FILE" <<EOF
  # Example configuration for git automerge

  staging:
    base: main
    branches:
      - hotfix/*
    tag_prefix: false

  feature:
    base: main
    branches:
      - feature/*
  # if no tag_prefix default 'automerge-' is used
EOF

  echo "‚úÖ Example $CONFIG_FILE created in the current directory."

  exit
fi

ORIGINAL_BRANCH=$(git rev-parse --abbrev-ref HEAD)
TEMP_BRANCH=""
TAG_NAME=""

# Cleanup on exit
cleanup() {
  echo -e "\nüßπ Cleaning up..."
  if [[ -n "$TEMP_BRANCH" ]]; then
    git checkout "$ORIGINAL_BRANCH" >/dev/null 2>&1 || true
    git branch -D "$TEMP_BRANCH" >/dev/null 2>&1 || true
    echo "üîÅ Restored branch: $ORIGINAL_BRANCH"
  fi
  if [[ -n "$TAG_NAME" ]]; then
    git tag -d "$TAG_NAME" >/dev/null 2>&1 || true
  fi
}
trap cleanup EXIT

# Fetch latest from remote
echo "üîÑ Fetching origin..."
git fetch --all

DEFAULT_BRANCH=$(git symbolic-ref refs/remotes/origin/HEAD 2>/dev/null | sed 's|^refs/remotes/origin/||')
if [[ -z "$DEFAULT_BRANCH" ]]; then
  echo "‚ùå Could not determine default branch of origin."
  exit 1
fi

echo "üìç Default branch is: $DEFAULT_BRANCH"

CONFIG_FILE="automerge-config.yaml"

TMP_CONFIG_FILE=$(mktemp)
CONFIG_PATH="automerge-config.yaml"
REMOTE_REF="origin/${DEFAULT_BRANCH}:${CONFIG_PATH}"
# Get base branch for this env from remote config
echo "üì• Fetching config from $REMOTE_REF..."
if ! git show "$REMOTE_REF" > "$TMP_CONFIG_FILE" 2>/dev/null; then
  rm -f "$TMP_CONFIG_FILE"  
  echo "‚ùå Skip loading $CONFIG_PATH from $REMOTE_REF (file not found on remote default branch)"
else
  trap 'rm -f "$TMP_CONFIG_FILE"' EXIT
  CONFIG_FILE=$TMP_CONFIG_FILE
fi

echo "‚úÖ Config loaded into $CONFIG_FILE"

# Check prerequisites
if [[ ! -f "$CONFIG_FILE" ]]; then
  echo "‚ùå Config file '$CONFIG_FILE' not found."
  exit 1
fi
if [[ -n "$(git status --porcelain)" ]]; then
  echo "‚ùå Working directory not clean. Commit or stash changes."
  exit 1
fi

# Extract environment from --env= or prompt
ENV=""
for arg in "$@"; do
  if [[ "$arg" == --env=* ]]; then
    ENV="${arg#--env=}"
  fi
done

if [[ -z "$ENV" ]]; then
  echo "Select environment:"
  
  ENVIRONMENTS=()
  while IFS= read -r env; do
    ENVIRONMENTS+=("$env")
  done < <(yq e 'keys | .[]' "$CONFIG_FILE")

  for i in "${!ENVIRONMENTS[@]}"; do
    echo "  [$i] ${ENVIRONMENTS[$i]}"
  done
fi

# Prompt for selection
read -rp "Choose environment number: " selection

# Validate input
if ! [[ "$selection" =~ ^[0-9]+$ ]] || [ "$selection" -lt 0 ] || [ "$selection" -ge "${#ENVIRONMENTS[@]}" ]; then
  echo "‚ùå Invalid selection."
  exit 1
fi

# Get selected environment
ENV="${ENVIRONMENTS[$selection]}"
echo "‚úÖ Selected environment: $ENV"

# Extract tag config for selected env
TAG_PREFIX_RAW=$(yq e ".${ENV}.tag_prefix" "$CONFIG_FILE")
if [[ "$TAG_PREFIX_RAW" == "false" ]]; then
  TAG_PREFIX=""
elif [[ "$TAG_PREFIX_RAW" == "null" || -z "$TAG_PREFIX_RAW" ]]; then
  TAG_PREFIX="automerge-"
else
  TAG_PREFIX="$TAG_PREFIX_RAW"
fi

# Extract branch config for selected env
BASE_BRANCH=$(yq e ".${ENV}.base" "$CONFIG_FILE")

BRANCH_PATTERNS=()
while IFS= read -r pattern; do
  BRANCH_PATTERNS+=("$pattern")
done < <(yq eval ".${ENV}.branches[]" "$CONFIG_FILE")

if [[ -z "$BASE_BRANCH" || "${#BRANCH_PATTERNS[@]}" -eq 0 ]]; then
  echo "‚ùå Invalid environment config in YAML."
  exit 1
fi

REMOTE_BRANCHES=()
while IFS= read -r line; do
  # Skip symbolic refs like origin/HEAD -> origin/main
  if [[ "$line" != *'->'* ]]; then
    REMOTE_BRANCHES+=("${line#origin/}")
  fi
done < <(git branch -r)

# Match patterns
MATCHED_BRANCHES=()
for pattern in "${BRANCH_PATTERNS[@]}"; do
  for branch in "${REMOTE_BRANCHES[@]}"; do
    branch="$(echo "$branch" | xargs)"
    if [[ "$branch" =~ $pattern ]]; then
      MATCHED_BRANCHES+=("$branch")
    fi
  done
done

echo "‚úÖ Found ${#MATCHED_BRANCHES[@]} matching branches."

if [[ ${#MATCHED_BRANCHES[@]} -eq 0 ]]; then
  echo "‚ùå No branches matched the patterns."
  exit 1
fi

echo "‚úÖ Branches to merge:"
for b in "${MATCHED_BRANCHES[@]}"; do
  echo "$b"
done

# Create temp branch
TIMESTAMP=$(date +"%Y%m%d%H%M%S")
TEMP_BRANCH="automerge_tmp_${ENV}_${TIMESTAMP}"
TAG_NAME="${TAG_PREFIX}${ENV}-${TIMESTAMP}"

echo "Creating branch '$TEMP_BRANCH' from origin/$BASE_BRANCH..."
git checkout -b "$TEMP_BRANCH" "origin/$BASE_BRANCH"

# Merge branches
for b in "${MATCHED_BRANCHES[@]}"; do
  echo "Merging $b..."
  if ! git merge --no-edit "$b"; then
    echo "‚ùå Merge conflict from '$b'. Resolve manually."
    exit 1
  fi
done

# Tag and push
echo "Creating tag '$TAG_NAME'..."
git tag "$TAG_NAME"
git push origin "$TAG_NAME"

echo "‚úÖ Tag '$TAG_NAME' pushed to origin."
